# handlers/training_reminder.py

from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from states import ChatStates
from keyboards.chat_keyboards import chat_back_kb
from services.chat_service import ChatService
from services.main_menu_service import MenuService

router = Router()

@router.message(StateFilter(ChatStates.chatting))
async def reminder_chat_message(message: Message, state: FSMContext):
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ç–µ–∫—Å—Ç –≤ Gymmy
    history = (await state.get_data()).get("history", [])
    chat_svc = ChatService()
    # –ì–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (list of dicts —Å role/content)
    messages = history + [{"role": "user", "content": message.text}]
    answer = await chat_svc.get_response(messages)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    history = messages + [{"role": "assistant", "content": answer}]
    await state.update_data(history=history)
    await message.answer(answer, reply_markup=chat_back_kb())

@router.callback_query(lambda c: c.data == "chat_back", StateFilter(ChatStates.chatting))
async def chat_back_cb(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    markup = MenuService(callback.from_user.id).get_main_menu_markup()
    await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ü´°", reply_markup=markup)
