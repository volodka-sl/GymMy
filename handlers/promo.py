from decimal import Decimal
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from states import PromoStates
from services.promo_service import PromoService, PromoResult
from services.payment_service import PaymentService

from services.main_menu_service import MenuService
from services.subscription_service import SubscriptionService

router = Router(name="promo")


@router.callback_query(F.data == "tariff_promo")
async def prompt_promo(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PromoStates.enter_code)
    await callback.message.answer("üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    await callback.answer()


@router.message(PromoStates.enter_code)
async def process_promo(message: Message, state: FSMContext):
    code = message.text.strip()
    svc  = PromoService(message.from_user.id)

    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ 990‚ÇΩ, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –µ—ë –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
        result: PromoResult = svc.apply_code(code, original_amount=Decimal('990.00'))
    except ValueError as e:
        await message.answer(f"‚ùóÔ∏è {e}")
        svc.close()
        return

    svc.close()
    menu_service = MenuService(SubscriptionService(message.from_user.id))

    # 1) –ï—Å–ª–∏ free_days ‚Äî –∫–∞–∫ –±—ã–ª–æ
    if result.type == 'free_days':
        end_str, desc = result.value, result.description
        await message.answer(
            f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ *{code}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω!\n"
            f"{desc}\n\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ *{end_str}* –ø–æ –≤–∞—à–µ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É.",
            parse_mode="Markdown",
            reply_markup=MenuService(message.from_user.id).get_main_menu_markup()
        )

    # 2) –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ –Ω–æ–≤–æ–π —Ü–µ–Ω–µ
    else:
        new_price: Decimal = result.value  # Decimal
        desc = result.description
        pay_svc = PaymentService(message.from_user.id)
        try:
            link = await pay_svc.generate_payment_link(amount=new_price)
        finally:
            pay_svc.close()

        await message.answer(
            (
                f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ *{code}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω!\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {desc}\n\n"
                f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{new_price:.2f}‚ÇΩ</b>.\n"
                f"–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –ø–µ—Ä–µ–π–¥–∏ –ø–æ "
                f"<a href=\"{link}\"><b>—Å—Å—ã–ª–∫–µ</b></a>"
            ),
            parse_mode="HTML",
            reply_markup=MenuService(message.from_user.id).get_main_menu_markup()
        )

    await state.clear()
