from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from services.exercise_service import ExerciseService
from services.subscription_service import SubscriptionService  # ‚Üê‚Äî –ò–º–ø–æ—Ä—Ç
from keyboards.exercise_keyboards import muscles_kb, levels_kb, exercises_kb
from states import ExerciseStates
from storage.models import DifficultyLevel

router = Router(name="exercise")


@router.message(F.text == "üìö –ë–∞–∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
async def ask_muscle(message: Message, state: FSMContext):
    svc = ExerciseService()
    muscles = svc.list_muscles()
    svc.close()

    await state.clear()
    await state.set_state(ExerciseStates.waiting_for_muscle)
    await message.answer(
        "üí™ –û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.\n"
        "–í—ã–±–µ—Ä–∏ –º—ã—à–µ—á–Ω—É—é –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=muscles_kb(muscles),
    )


@router.callback_query(
    ExerciseStates.waiting_for_muscle, F.data == "exercise_cancel"
)
async def cancel_exercises(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await state.clear()


@router.callback_query(
    ExerciseStates.waiting_for_muscle, F.data.startswith("muscle_choice:")
)
async def choose_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()

    muscle = callback.data.split(":", 1)[1]
    await state.update_data(muscle=muscle)

    svc = ExerciseService()
    levels = svc.list_levels(muscle)
    svc.close()

    # ‚Üê‚Äî –§–ò–õ–¨–¢–†–£–ï–ú –£–†–û–í–ù–ò –î–õ–Ø –ù–ï–ü–û–î–ü–ò–°–ê–ù–ù–´–•
    sub_svc = SubscriptionService(callback.from_user.id)
    has_sub = False
    try:
        has_sub = sub_svc.has_active()
    finally:
        sub_svc.close()

    if not has_sub:
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª—ë–≥–∫–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –±–∞–∑–µ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ
        levels = [DifficultyLevel.easy]

    await state.set_state(ExerciseStates.waiting_for_level)
    await callback.message.answer(
        f"üßê –í—ã–±—Ä–∞–Ω–∞ *{muscle}*.\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
        parse_mode="Markdown",
        reply_markup=levels_kb(levels),
    )


@router.callback_query(
    ExerciseStates.waiting_for_level, F.data == "back_to_muscle"
)
async def back_to_muscle(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()

    svc = ExerciseService()
    muscles = svc.list_muscles()
    svc.close()

    await state.set_state(ExerciseStates.waiting_for_muscle)
    await callback.message.answer(
        "üí™ –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ–º –º—ã—à–µ—á–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=muscles_kb(muscles),
    )


@router.callback_query(
    ExerciseStates.waiting_for_level, F.data.startswith("level_")
)
async def list_exs(callback: CallbackQuery, state: FSMContext):
    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º
    await callback.message.delete()
    await callback.answer()

    data = await state.get_data()
    muscle = data["muscle"]
    lvl_value = callback.data.split("_", 1)[1]
    chosen_level = DifficultyLevel(lvl_value)

    # ‚Üê‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sub_svc = SubscriptionService(callback.from_user.id)
    has_sub = False
    try:
        has_sub = sub_svc.has_active()
    finally:
        sub_svc.close()

    # –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
    level = chosen_level if has_sub else DifficultyLevel.easy  # ‚Üê‚Äî –ò–∑–º–µ–Ω–µ–Ω–æ

    svc = ExerciseService()
    exs = svc.list_exercises(muscle, level)
    svc.close()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç: –∫–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ —Å–ø–∏—Å–æ–∫ id
    await state.update_data(
        level=level.value,
        exercise_ids=[ex.exercise_id for ex in exs]
    )
    await state.set_state(ExerciseStates.waiting_for_exercise)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —É—Ä–æ–≤–Ω—è: –µ—Å–ª–∏ –º—ã ¬´–ø–æ–Ω–∏–∑–∏–ª–∏¬ª —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    level_name = level.name.title()
    suffix = ""
    if not has_sub and chosen_level != level:
        suffix = "\n\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    await callback.message.answer(
        f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è *{muscle}* ({level_name}):{suffix}",
        parse_mode="Markdown",
        reply_markup=exercises_kb(exs),
    )


@router.callback_query(
    ExerciseStates.waiting_for_exercise, F.data == "back_to_level"
)
async def back_to_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()

    data = await state.get_data()
    muscle = data["muscle"]

    svc = ExerciseService()
    levels = svc.list_levels(muscle)
    svc.close()

    await state.set_state(ExerciseStates.waiting_for_level)
    await callback.message.answer(
        f"üßê –í—ã–±—Ä–∞–Ω–∞ *{muscle}*.\n–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–Ω–æ–≤–∞:",
        parse_mode="Markdown",
        reply_markup=levels_kb(levels),
    )


@router.callback_query(
    ExerciseStates.waiting_for_exercise, F.data.startswith("exercise:")
)
async def show_detail(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()

    ex_id = int(callback.data.split(":", 1)[1])

    svc = ExerciseService()
    ex = svc.get_detail_by_id(ex_id)
    svc.close()

    if not ex:
        await callback.message.answer("‚ö†Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    detail_text = (
        f"üèãÔ∏è *{ex.name}*\n\n"
        f"{ex.description}\n\n"
        f"*–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*\n{ex.technique}\n\n"
        f"*–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {ex.equipment or '‚Äî'}"
    )
    await callback.message.answer(detail_text, parse_mode="Markdown")

    # –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    data = await state.get_data()
    muscle = data["muscle"]
    level = DifficultyLevel(data["level"])

    svc = ExerciseService()
    exs = svc.list_exercises(muscle, level)
    svc.close()

    await callback.message.answer(
        f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è *{muscle}* ({level.name.title()}):",
        parse_mode="Markdown",
        reply_markup=exercises_kb(exs),
    )
