from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from services.subscription_service import SubscriptionService
from states import WorkoutCreation
from services.program_service import ProgramService
from services.program_creator_service import ProgramCreatorService
from services.main_menu_service import MenuService
from services.user_program_view_service import UserProgramViewService
from services.exercise_service import ExerciseService
from keyboards.workout import main_workout_keyboard, level_keyboard

router = Router()

DAYS_RU = [
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
]

def days_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=DAYS_RU[0], callback_data="dow_0"),
         InlineKeyboardButton(text=DAYS_RU[1], callback_data="dow_1")],
        [InlineKeyboardButton(text=DAYS_RU[2], callback_data="dow_2"),
         InlineKeyboardButton(text=DAYS_RU[3], callback_data="dow_3")],
        [InlineKeyboardButton(text=DAYS_RU[4], callback_data="dow_4"),
         InlineKeyboardButton(text=DAYS_RU[5], callback_data="dow_5")],
        [InlineKeyboardButton(text=DAYS_RU[6], callback_data="dow_6")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_comment")]
    ])

@router.message(lambda message: message.text == "üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def my_workouts_handler(message: Message, state: FSMContext):
    sub_service = SubscriptionService(message.from_user.id)
    if not sub_service.has_active():
        await message.answer("‚ùóÔ∏è –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å Premium-–ø–æ–¥–ø–∏—Å–∫–æ–π.")
        return
    await state.clear()
    svc = ProgramService(message.from_user.id)
    programs = svc.list_user_programs()
    markup = main_workout_keyboard(programs)
    await message.answer("‚ö°Ô∏è –¢–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", reply_markup=markup)

@router.callback_query(lambda c: c.data == "cancel_creation")
async def cancel_creation_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ü´°")
    await state.clear()
    markup = MenuService(callback.from_user.id).get_main_menu_markup()
    await callback.message.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ä–∞–∑–¥–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ü´°", reply_markup=markup)

@router.callback_query(lambda c: c.data == "create_workout")
async def create_workout_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await state.set_state(WorkoutCreation.choosing_level)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=level_keyboard())

@router.callback_query(lambda c: c.data == "plan_create")
async def plan_create_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await state.set_state(WorkoutCreation.plan_choosing_level)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞:", reply_markup=level_keyboard())

@router.callback_query(lambda c: c.data == "back_to_workouts", StateFilter(WorkoutCreation.choosing_level))
async def back_to_workouts_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await state.clear()
    svc = ProgramService(callback.from_user.id)
    programs = svc.list_user_programs()
    markup = main_workout_keyboard(programs)
    await callback.message.answer("‚ö°Ô∏è –¢–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", reply_markup=markup)

@router.callback_query(
    lambda c: c.data.startswith("level_"),
    StateFilter(WorkoutCreation.choosing_level)
)
async def level_selected_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    level = callback.data.split("_", 1)[1]
    await state.set_state(WorkoutCreation.waiting_comment)
    await state.update_data(chosen_level=level)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ö–æ—á—É –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≥–∏ –∏ –ø–ª–µ—á–∏, –Ω–µ–º–Ω–æ–≥–æ –±–∏—Ü–µ–ø—Å')",
        parse_mode="HTML"
    )

@router.message(StateFilter(WorkoutCreation.waiting_comment))
async def comment_received(message: Message, state: FSMContext):
    comment = message.text.strip()
    await state.update_data(comment=comment)
    await state.set_state(WorkoutCreation.choosing_day)
    await message.answer(
        "–í –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –¥–µ–ª–∞—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        reply_markup=days_keyboard()
    )

@router.callback_query(lambda c: c.data == "back_to_comment", StateFilter(WorkoutCreation.choosing_day))
async def back_to_comment_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    await state.set_state(WorkoutCreation.waiting_comment)
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"—Ö–æ—á—É –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≥–∏ –∏ –ø–ª–µ—á–∏, –Ω–µ–º–Ω–æ–≥–æ –±–∏—Ü–µ–ø—Å\")",
        parse_mode="HTML"
    )

@router.callback_query(lambda c: c.data == "back_to_workouts_list")
async def back_to_workouts_list_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    svc = ProgramService(callback.from_user.id)
    programs = svc.list_user_programs()
    markup = main_workout_keyboard(programs)
    await callback.message.answer("üèãÔ∏è –¢–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Å–æ–æ–±—â–µ–Ω–∏—é", reply_markup=markup)

@router.callback_query(lambda c: c.data.startswith("dow_"), StateFilter(WorkoutCreation.choosing_day))
async def day_chosen_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    day_idx = int(callback.data.split("_", 1)[1])
    day_ru = DAYS_RU[day_idx]
    await state.update_data(day_of_week=day_ru)
    data = await state.get_data()
    level = data.get("chosen_level")
    comment = data.get("comment", "")
    day_of_week = data.get("day_of_week")
    wait_msg = await callback.message.answer("‚ö° –ü–∞—Ä—É –º–≥–Ω–æ–≤–µ–Ω–∏–π, —Å–æ–∑–¥–∞—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É...")
    await state.set_state(WorkoutCreation.generating_plan)
    await state.update_data(wait_msg_id=wait_msg.message_id)
    user_id = callback.from_user.id
    creator = ProgramCreatorService(user_id)
    try:
        await creator.generate_and_save_plan(level, comment, day_of_week)
        await state.clear()
        markup = MenuService(user_id).get_main_menu_markup()
        await wait_msg.answer("–ì–æ—Ç–æ–≤–æ! –¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=markup)
    except Exception as e:
        await state.clear()
        await wait_msg.answer(
            f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

@router.callback_query(lambda c: c.data == "back_to_day", StateFilter(WorkoutCreation.generating_plan))
async def back_to_day_cb(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if "wait_msg_id" in data:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=data["wait_msg_id"])
        except Exception:
            pass
    await callback.message.delete()
    await callback.answer()
    await state.set_state(WorkoutCreation.choosing_day)
    await callback.message.answer(
        "–í –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤–∞–º —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –¥–µ–ª–∞—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        reply_markup=days_keyboard()
    )

# ---- –í–û–†–û–ù–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–ê ----

@router.callback_query(lambda c: c.data.startswith("level_"), StateFilter(WorkoutCreation.plan_choosing_level))
async def plan_level_selected_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    level = callback.data.split("_", 1)[1]
    await state.set_state(WorkoutCreation.plan_waiting_comment)
    await state.update_data(plan_level=level)
    await callback.message.answer(
        "üìù –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø–ª–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–Ω–∞–∫–∞—á–∞—Ç—å –Ω–æ–≥–∏ –∏ –ø—Ä–µ—Å—Å\")"
    )

@router.message(StateFilter(WorkoutCreation.plan_waiting_comment))
async def plan_comment_cb(message: Message, state: FSMContext):
    await state.update_data(plan_comment=message.text)
    await state.set_state(WorkoutCreation.plan_waiting_days)
    await message.answer(
        "üóì –í –∫–∞–∫–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ç–µ–±–µ –±—ã–ª–æ –±—ã —É–¥–æ–±–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è? "
        "–ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ ‚Äî —è –≤—Å—ë –ø–æ–π–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞ –∏ –ø—è—Ç–Ω–∏—Ü–∞\" –∏–ª–∏ \"—Ö–æ—á—É 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –∫—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö\")"
    )

@router.message(StateFilter(WorkoutCreation.plan_waiting_days))
async def plan_days_cb(message: Message, state: FSMContext):
    await state.update_data(plan_days=message.text)
    data = await state.get_data()
    level = data.get("plan_level")
    comment = data.get("plan_comment")
    days_text = data.get("plan_days")
    wait_msg = await message.answer("‚ö° –ü–∞—Ä—É –º–≥–Ω–æ–≤–µ–Ω–∏–π, —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
    try:
        creator = ProgramCreatorService(message.from_user.id)
        await creator.generate_and_save_full_plan(level, comment, days_text)
        await state.clear()
        markup = MenuService(message.from_user.id).get_main_menu_markup()
        await wait_msg.answer("–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=markup)
    except Exception as e:
        print(e)
        await state.clear()
        await wait_msg.answer(
            f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞:\n–ü–ª–∞–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

@router.callback_query(lambda c: c.data.startswith("workout_"))
async def workout_view_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()
    user_program_id = int(callback.data.split("_", 1)[1])
    service = UserProgramViewService(callback.from_user.id)
    details, markup = service.get_user_program_detail(user_program_id)
    msg = await callback.message.answer(details, reply_markup=markup, parse_mode="HTML")
    await state.update_data(last_workout_msg_id=msg.message_id)

@router.callback_query(lambda c: c.data.startswith("exercise_detail:"))
async def exercise_detail_cb(callback: CallbackQuery):
    await callback.answer()
    ex_id = int(callback.data.split(":", 1)[1])
    svc = ExerciseService()
    ex = svc.get_detail_by_id(ex_id)
    svc.close()
    if not ex:
        await callback.message.answer("‚ö†Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    detail_text = (
        f"üèãÔ∏è <b>{ex.name}</b>\n\n"
        f"{ex.description}\n\n"
        f"<b>–¢–µ—Ö–Ω–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n{ex.technique}\n\n"
        f"<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> {ex.equipment or '‚Äî'}"
    )
    await callback.message.answer(detail_text, parse_mode="HTML")

@router.callback_query(lambda c: c.data.startswith("delete_program:"))
async def delete_program_confirm_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_program_id = int(callback.data.split(":", 1)[1])
    msg = await callback.message.answer(
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_program_yes:{user_program_id}")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"delete_program_no:{user_program_id}")]
            ]
        )
    )
    await state.update_data(delete_confirm_msg_id=msg.message_id)

@router.callback_query(lambda c: c.data.startswith("delete_program_yes:"))
async def delete_program_yes_cb(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if "last_workout_msg_id" in data and data["last_workout_msg_id"]:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=data["last_workout_msg_id"])
        except Exception:
            pass
    await callback.message.delete()
    await callback.answer()
    user_program_id = int(callback.data.split(":", 1)[1])
    from storage.user_program_repository import UserProgramRepository
    repo = UserProgramRepository()
    try:
        program = repo.get(user_program_id)
        if program:
            repo._session.delete(program)
            repo._session.commit()
            await callback.message.answer("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await callback.message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    finally:
        repo.close()
    await state.update_data(last_workout_msg_id=None)
    await state.update_data(delete_confirm_msg_id=None)

@router.callback_query(lambda c: c.data.startswith("delete_program_no:"))
async def delete_program_no_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()

@router.message(StateFilter(WorkoutCreation))
async def block_while_creating(message: Message):
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø–ª–∞–Ω–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã ü§´"
    )
