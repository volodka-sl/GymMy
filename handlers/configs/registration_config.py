import re
from datetime import date
from states import RegistrationStates

def validate_weight(v: str):
    try:
        w = float(v.replace(',', '.'))
        if w > 0:
            return True, None
        return False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è –¥–ª—è –≤–µ—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 68 ‚öñÔ∏è"
    except ValueError:
        return False, "–•–º–º‚Ä¶ –ù–µ –°–æ–≤—Å–µ–º –ø–æ–Ω—è–ª —Ç–µ–±—è üßê\n–í–≤–µ–¥–∏ –≤–µ—Å —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 68 ‚öñÔ∏è"

FIELD_CONFIG = [
    {
        'key': 'sex',
        'prefix': 'sex',
        'label': '–ü–æ–ª',
        'state': RegistrationStates.sex,
        'ask': (
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Ç–æ—á–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ üí°"
        ),
        'keyboard': 'sex_kb',
        'type': 'callback',
        'parse': lambda data: data.rsplit('_', 1)[1].upper(),
        'validate': lambda v: (True, None) if v in ('M', 'F') else (False, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π üëç"),
        'manual_error': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π üëç",
        'transform': lambda v: v,
        'next': 'height_cm',
    },
    {
        'key': 'height_cm',
        'label': '–†–æ—Å—Ç',
        'state': RegistrationStates.height,
        'ask': "–û—Ç–ª–∏—á–Ω–æ üòä\n–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö",
        'keyboard': None,
        'type': 'message',
        'validate': lambda v: (
            (v.isdigit() and int(v) >= 100),
            "–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω—è–ª üòÖ\n–í–≤–µ–¥–∏ —Ä–æ—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä 172"
        ) if not (v.isdigit() and int(v) >= 100) else (True, None),
        'transform': lambda v: int(v),
        'next': 'weight_kg',
    },
    {
        'key': 'weight_kg',
        'label': '–í–µ—Å',
        'state': RegistrationStates.weight,
        'ask': "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö ‚öñÔ∏è",
        'keyboard': None,
        'type': 'message',
        'validate': validate_weight,
        'transform': lambda v: float(v.replace(',', '.')),
        'next': 'body_fat_pct',
    },
    {
        'key': 'body_fat_pct',
        'prefix': 'body_fat',
        'label': '% –∂–∏—Ä–∞',
        'state': RegistrationStates.body_fat,
        'ask': "–£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –≤ —Ç–µ–ª–µ ‚Äî –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üìä",
        'keyboard': 'body_fat_kb',
        'type': 'callback',
        'photo_path': lambda data: f"assets/body_fat_pictures/body_fat_picture_{data['sex']}.png",
        'parse': lambda data: data.rsplit('_', 1)[1],
        'validate': lambda v: (True, None),
        'manual_error': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –∫–Ω–æ–ø–∫–æ–π üìä",
        'transform': lambda v: v,
        'next': 'health_issues',
    },
    {
        'key': 'health_issues',
        'prefix': 'health',
        'label': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º',
        'state': RegistrationStates.health,
        'ask': (
            "–°–ø–∞—Å–∏–±–æ, –ø–ª–∞–Ω –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤! üòå\n"
            "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏, "
            "–Ω–∞–ø–∏—à–∏, —É–∫–∞–∂–∏ —Å–≤–æ–∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è\n,"
            "–Ω–∞–ø—Ä–∏–º–µ—Ä: "
            "‚Äî –æ–ø–∏—à–∏ –∏—Ö –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ù–µ—Ç¬ª"
        ),
        'keyboard': 'health_kb',
        'type': 'both',
        'parse': lambda data: data.rsplit('_', 1)[1],
        'validate': lambda v: (True, None),
        'transform': lambda v: '–ù–µ—Ç' if v.lower() == 'no' else v.strip(),
        'next': 'birth_date',
    },
    {
        'key': 'birth_date',
        'label': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
        'state': RegistrationStates.birth_date,
        'ask': (
            "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å üéÇ\n\n"
            "–ö–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì\n"
            "–≠—Ç–æ —Ç–∞–∫–∂–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™"
        ),
        'keyboard': None,
        'type': 'message',
        'validate': lambda v: (
            bool(re.match(r'^\d{2}\.\d{2}\.\d{4}$', v)),
            "–ò–∑–≤–∏–Ω–∏, –Ω–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç üòÖ\n–í–≤–µ–¥–∏ –¥–∞—Ç—É –∫–∞–∫ –î–î.MM.–ì–ì–ì–ì"
        ),
        'transform': lambda v: date(*map(int, v.split('.')[::-1])).isoformat(),
        'next': None,
    },
]

CONFIG_BY_KEY = {cfg['key']: cfg for cfg in FIELD_CONFIG}
STATE_TO_KEY   = {cfg['state']: cfg['key'] for cfg in FIELD_CONFIG}
