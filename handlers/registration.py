import re
from datetime import date
from inspect import signature

from aiogram import types, Dispatcher, F
from aiogram.filters.command import CommandStart
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext

import keyboards.inline_keyboards as keyboards
from services.main_menu_service import MenuService
from handlers.configs.registration_config import FIELD_CONFIG, CONFIG_BY_KEY, STATE_TO_KEY
from states import RegistrationStates
from services.user_service import UserService
from services.subscription_service import SubscriptionService


async def _ask_field(obj: types.Message, state: FSMContext, key: str):
    cfg = CONFIG_BY_KEY[key]
    data = await state.get_data()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    kb = None
    kb_name = cfg.get("keyboard")
    if isinstance(kb_name, str):
        kb_func = getattr(keyboards, kb_name, None)
        if kb_func:
            params = signature(kb_func).parameters
            kb = kb_func(data) if len(params) == 1 else kb_func()
    elif callable(kb_name):
        kb = kb_name()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ (—Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑)
    if cfg.get("photo_path"):
        await obj.answer_photo(
            types.FSInputFile(path=cfg["photo_path"](data)),
            caption=cfg["ask"],
            reply_markup=kb
        )
    else:
        await obj.answer(cfg["ask"], reply_markup=kb)


async def _send_summary(obj: types.CallbackQuery | types.Message, state: FSMContext):
    data = await state.get_data()
    summary = (
        f"–í–æ—Ç —á—Ç–æ —è –∑–∞–ø–∏—Å–∞–ª:\n\n"
        f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if data['sex']=='M' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚Ä¢ –†–æ—Å—Ç: {data['height_cm']} —Å–º\n"
        f"‚Ä¢ –í–µ—Å: {data['weight_kg']} –∫–≥\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: {data['body_fat_pct']}%\n"
        f"‚Ä¢ –§–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {data['health_issues']}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? üòä"
    )
    if isinstance(obj, types.CallbackQuery):
        await obj.message.answer(summary, reply_markup=keyboards.confirm_kb())
        await obj.answer()
    else:
        await obj.answer(summary, reply_markup=keyboards.confirm_kb())

    await state.update_data(editing_field=None)
    await state.set_state(RegistrationStates.confirmation)


async def _start_registration_flow(message: types.Message, state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–æ—Ä–æ–Ω–∫–∏: —Å–±—Ä–æ—Å FSM –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å.
    """
    await state.clear()
    first_key = FIELD_CONFIG[0]["key"]
    await _ask_field(message, state, first_key)
    await state.set_state(CONFIG_BY_KEY[first_key]["state"])


async def cmd_start(message: types.Message, state: FSMContext):
    svc = UserService(message.from_user.id)
    exists = svc.exists()
    svc.close()

    if exists:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞! üòä\n"
            "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å ‚Äî –º—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã.",
            reply_markup=MenuService(message.from_user.id).get_main_menu_markup()
        )
        return

    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üëã", reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
        "–Ø ‚Äî GymMy, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö. –ü–æ–¥—Å–∫–∞–∂—É, –∫–∞–∫ –Ω–∞—á–∞—Ç—å, "
        "–ø–æ–º–æ–≥—É —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, –ø–æ–¥–¥–µ—Ä–∂—É, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ, –∏ –Ω–µ –¥–∞–º —Ç–µ–±–µ —Å–¥–∞—Ç—å—Å—è üí™\n\n"
        "–ö—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞—é –∏ —Ç–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–πÔ∏è. "
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—â—ë –±—ã—Å—Ç—Ä–µ–µ üçΩÔ∏è\n\n"
        "–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Å–¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, "
        "–∏ —è —Å–æ–±–µ—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–æ–π–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ."
    )
    await _start_registration_flow(message, state)


async def generic_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    cur = await state.get_state()
    _, state_name = cur.split(":", 1)
    key = STATE_TO_KEY[getattr(RegistrationStates, state_name)]
    cfg = CONFIG_BY_KEY[key]

    raw = cfg["parse"](callback.data)
    valid, err = cfg["validate"](raw)
    if not valid:
        return await callback.answer(err, show_alert=True)

    await state.update_data(**{key: cfg["transform"](raw)})
    data = await state.get_data()
    if data.get("editing_field") == key:
        return await _send_summary(callback, state)

    next_key = cfg["next"]
    await _ask_field(callback.message, state, next_key)
    await state.set_state(CONFIG_BY_KEY[next_key]["state"])
    await callback.answer()


async def generic_message_handler(message: types.Message, state: FSMContext):
    cur = await state.get_state()
    if not cur:
        return
    _, state_name = cur.split(":", 1)
    key = STATE_TO_KEY[getattr(RegistrationStates, state_name)]
    cfg = CONFIG_BY_KEY[key]

    if cfg["type"] == "callback":
        return await message.answer(cfg.get("manual_error", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ–π."))

    valid, err = cfg["validate"](message.text)
    if not valid:
        return await message.answer(err)

    await state.update_data(**{key: cfg["transform"](message.text)})
    data = await state.get_data()

    if key == "health_issues" and data.get("editing_field") is None:
        await message.answer("–ê–≥–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—É —ç—Ç–æ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ üòä")

    if data.get("editing_field") == key:
        return await _send_summary(message, state)

    next_key = cfg["next"]
    if next_key:
        await _ask_field(message, state, next_key)
        await state.set_state(CONFIG_BY_KEY[next_key]["state"])
    else:
        await _send_summary(message, state)


async def confirmation_chosen(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    svc = UserService(callback.from_user.id)

    if callback.data == "confirm_yes":
        svc.get_or_create_profile(
            sex=data["sex"],
            height_cm=data["height_cm"],
            weight_kg=data["weight_kg"],
            body_fat_pct=data["body_fat_pct"],
            health_issues=data["health_issues"],
            birth_date=data["birth_date"],
        )

        # –ü—Ä–æ—Ñ–∏–ª—å
        await callback.message.answer(
            "üéâ –°—É–ø–µ—Ä! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!",
            reply_markup=MenuService(callback.message.from_user.id).get_main_menu_markup()
        )

        # –¢–∞—Ä–∏—Ñ—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)
        sub_svc = SubscriptionService(callback.from_user.id)
        try:
            if not sub_svc.has_active():
                tariffs_text = (
                    "–°–µ–π—á–∞—Å —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ.\n\n"
                    "üì¶ *–ß—Ç–æ –≤ –Ω–µ–≥–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
                    "‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n"
                    "‚Ä¢ –ß–∞—Ç —Å –æ–±—â–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n\n"
                    "üöÄ –¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å *–ü—Ä–µ–º–∏—É–º-–≤–µ—Ä—Å–∏—è (990 ‚ÇΩ/–º–µ—Å), –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:*\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                    "‚Ä¢ –ü–æ–ª–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
                    "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n"
                    "‚Ä¢ –ß–∞—Ç —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –∑–¥–æ—Ä–æ–≤—å—é –∏ —Å–ø–æ—Ä—Ç—É\n"
                    "‚Ä¢ –ú–æ—Ä–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é üòä\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é –∏–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥–µ–º –Ω–∞ –ü—Ä–µ–º–∏—É–º?"
                )
                await callback.message.answer(
                    tariffs_text,
                    parse_mode="Markdown",
                    reply_markup=keyboards.tariffs_kb()
                )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await state.clear()
                await callback.message.answer(
                    "–ò–ª–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
                    reply_markup=MenuService(callback.message.from_user.id).get_main_menu_markup()
                )
        finally:
            sub_svc.close()

        await state.clear()

    else:
        await callback.message.answer(
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?",
            reply_markup=keyboards.edit_field_kb()
        )

    svc.close()


async def edit_field_chosen(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    field = callback.data.split("_", 1)[1]
    await state.update_data(editing_field=field)
    await _ask_field(callback.message, state, field)
    await state.set_state(CONFIG_BY_KEY[field]["state"])


async def update_data(message: types.Message, state: FSMContext):
    svc = UserService(message.from_user.id)
    if not svc.exists():
        await message.answer(
            "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /start."
        )
        svc.close()
        return
    svc.close()

    # –æ—á–∏—â–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞–µ–º flow
    await message.answer("–û–±–Ω–æ–≤–∏–º —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:", reply_markup=types.ReplyKeyboardRemove())
    await _start_registration_flow(message, state)


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_start, CommandStart())

    for cfg in FIELD_CONFIG:
        if cfg["type"] in ("callback", "both"):
            prefix = cfg.get("prefix", cfg["key"])
            dp.callback_query.register(
                generic_callback_handler,
                StateFilter(cfg["state"]),
                F.data.startswith(f"{prefix}_"),
            )

    all_states = [cfg["state"] for cfg in FIELD_CONFIG]
    dp.message.register(generic_message_handler, StateFilter(*all_states))

    dp.callback_query.register(
        confirmation_chosen,
        StateFilter(RegistrationStates.confirmation),
        F.data.startswith("confirm_"),
    )
    dp.callback_query.register(
        edit_field_chosen,
        StateFilter(RegistrationStates.confirmation),
        F.data.startswith("edit_"),
    )

    dp.message.register(update_data, F.text == "‚úçÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
