"""Restructure exercise/program_template, drop logs, add difficulty, is_active, rework schedule

Revision ID: 8f908b308e7f
Revises: a5e285fd4608
Create Date: 2025-07-09 01:58:43.641674

"""

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = '8f908b308e7f'
down_revision = 'a5e285fd4608'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("""
        CREATE TYPE difficulty_levels AS ENUM (
            'easy',
            'medium',
            'advanced'
        );
        """)
    op.drop_table('workout_log')
    op.drop_table('user_program_exercise')
    op.add_column('exercise', sa.Column('technique', sa.Text(), nullable=True, comment='Техника выполнения'))
    op.add_column('exercise', sa.Column('difficulty', sa.Enum('easy', 'medium', 'advanced', name='difficulty_levels'), nullable=False, comment='Лёгкий / средний / продвинутый'))
    op.add_column('program_template', sa.Column('difficulty', sa.Enum('easy', 'medium', 'advanced', name='difficulty_levels'), nullable=False, comment='Лёгкий / средний / продвинутый'))
    op.create_index('ix_subscription_remind_at', 'subscription_reminder', ['remind_at'], unique=False)
    op.alter_column('user', 'sex',
               existing_type=sa.VARCHAR(length=1),
               nullable=True,
               comment='M/F/O')
    op.alter_column('user', 'tz_offset',
               existing_type=sa.SMALLINT(),
               comment='Смещение от UTC, часы',
               existing_nullable=False)
    op.add_column('user_program', sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False))
    op.add_column('user_program_schedule', sa.Column('template_id', sa.Integer(), nullable=False))
    op.drop_constraint(op.f('uq_program_schedule'), 'user_program_schedule', type_='unique')
    op.create_unique_constraint('uq_schedule_template_day', 'user_program_schedule', ['template_id', 'day_of_week'])
    op.drop_constraint(op.f('user_program_schedule_user_program_id_fkey'), 'user_program_schedule', type_='foreignkey')
    op.create_foreign_key(None, 'user_program_schedule', 'program_template', ['template_id'], ['template_id'], ondelete='CASCADE')
    op.drop_column('user_program_schedule', 'user_program_id')
    op.add_column('user_subscription', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_column('user_subscription', 'active')
    op.drop_column('user_subscription', 'plan_id')
    op.execute("""
        CREATE OR REPLACE FUNCTION create_subscription_reminders()
        RETURNS TRIGGER AS $$
        BEGIN
          -- напоминание за 3 дня
          INSERT INTO subscription_reminder(user_subscription_id, remind_at, type)
            VALUES (NEW.subscription_id, NEW.end_ts - INTERVAL '3 days', 'before_3d');
          -- напоминание в день окончания
          INSERT INTO subscription_reminder(user_subscription_id, remind_at, type)
            VALUES (NEW.subscription_id, NEW.end_ts, 'on_end');
          RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
        """)

    op.execute("""
        CREATE TRIGGER trg_create_reminders
          AFTER INSERT ON user_subscription
          FOR EACH ROW
          EXECUTE FUNCTION create_subscription_reminders();
        """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_subscription', sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('user_subscription', sa.Column('active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.drop_column('user_subscription', 'created_at')
    op.add_column('user_program_schedule', sa.Column('user_program_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_program_schedule', type_='foreignkey')
    op.create_foreign_key(op.f('user_program_schedule_user_program_id_fkey'), 'user_program_schedule', 'user_program', ['user_program_id'], ['user_program_id'], ondelete='CASCADE')
    op.drop_constraint('uq_schedule_template_day', 'user_program_schedule', type_='unique')
    op.create_unique_constraint(op.f('uq_program_schedule'), 'user_program_schedule', ['user_program_id', 'day_of_week'], postgresql_nulls_not_distinct=False)
    op.drop_column('user_program_schedule', 'template_id')
    op.drop_column('user_program', 'is_active')
    op.alter_column('user', 'tz_offset',
               existing_type=sa.SMALLINT(),
               comment=None,
               existing_comment='Смещение от UTC, часы',
               existing_nullable=False)
    op.alter_column('user', 'sex',
               existing_type=sa.VARCHAR(length=1),
               nullable=False,
               comment=None,
               existing_comment='M/F/O')
    op.drop_index('ix_subscription_remind_at', table_name='subscription_reminder')
    op.drop_column('program_template', 'difficulty')
    op.drop_column('exercise', 'difficulty')
    op.drop_column('exercise', 'technique')
    op.create_table('user_program_exercise',
    sa.Column('user_program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('working_weight', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercise.exercise_id'], name=op.f('user_program_exercise_exercise_id_fkey')),
    sa.ForeignKeyConstraint(['user_program_id'], ['user_program.user_program_id'], name=op.f('user_program_exercise_user_program_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_program_id', 'exercise_id', name=op.f('pk_user_program_exercise'))
    )
    op.create_table('workout_log',
    sa.Column('log_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_program_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exercise_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workout_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('actual_sets', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('actual_reps', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('actual_weight', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True),
    sa.Column('rpe', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('logged_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['exercise_id'], ['exercise.exercise_id'], name=op.f('workout_log_exercise_id_fkey')),
    sa.ForeignKeyConstraint(['user_program_id'], ['user_program.user_program_id'], name=op.f('workout_log_user_program_id_fkey')),
    sa.PrimaryKeyConstraint('log_id', name=op.f('workout_log_pkey')),
    sa.UniqueConstraint('user_program_id', 'exercise_id', 'workout_date', name=op.f('uq_workout_log'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.execute("DROP TYPE IF EXISTS difficulty_levels;")
    op.execute("DROP TRIGGER IF EXISTS trg_create_reminders ON user_subscription;")
    op.execute("DROP FUNCTION IF EXISTS create_subscription_reminders();")
    # ### end Alembic commands ###
