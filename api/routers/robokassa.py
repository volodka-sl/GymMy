import os
import logging
import hashlib

from fastapi import APIRouter, Request, Form, HTTPException
from fastapi.responses import PlainTextResponse

from storage.db import SessionLocal
from storage.models import PaymentOrder, User
from services.notifier import BotNotifier
from services.subscription_service import SubscriptionService

router = APIRouter()
logger = logging.getLogger("robokassa")

BOT_TOKEN       = os.getenv("BOT_TOKEN")
# –ü—Ä–∞–≤–∏–ª—å–Ω–æ: PASSWORD_2, –∞ –Ω–µ PASSWORD2
ROBOKASSA_PASS2 = os.getenv("ROBOKASSA_PASSWORD_2")
notifier        = BotNotifier(BOT_TOKEN)


@router.api_route(
    "/result",
    methods=["GET", "POST"],
    response_class=PlainTextResponse,
    summary="Robokassa callback: —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞"
)
async def robokassa_result(
    request: Request,
    OutSum: str         = Form(None),
    InvId: str          = Form(None),
    SignatureValue: str = Form(None),
):
    # 1) –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ¬´—á–∏—Å—Ç—ã–µ¬ª GET-—Ä–µ–¥–∏—Ä–µ–∫—Ç—ã (–±–µ–∑ PaymentMethod)
    if request.method == "GET" and "PaymentMethod" not in request.query_params:
        return PlainTextResponse("OK")

    # 2) –ü—Ä–∏ GET-callback –±–µ—Ä—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query_params
    if request.method == "GET":
        qp = request.query_params
        OutSum         = qp.get("OutSum")
        InvId          = qp.get("InvId")
        SignatureValue = qp.get("SignatureValue")

    logger.info(f"[/result] callback via {request.method}: OutSum={OutSum!r}, InvId={InvId!r}")

    session = SessionLocal()
    try:
        # 3) –ò—â–µ–º –∑–∞–∫–∞–∑
        order = session.get(PaymentOrder, int(InvId))
        if not order:
            logger.error(f"Order {InvId} not found")
            raise HTTPException(404, "Order not found")

        # 4) –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.get(User, order.user_id)
        if not user:
            logger.error(f"Linked user {order.user_id} not found")
            raise HTTPException(500, "Linked user not found")
        chat_id = user.telegram_id

        # –°—ã—Ä–æ–π OutSum –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (Robokassa —à–ª—ë—Ç —Å —à–µ—Å—Ç—å—é –Ω—É–ª—è–º–∏)
        sum_for_sig = OutSum
        expected    = hashlib.md5(f"{sum_for_sig}:{InvId}:{ROBOKASSA_PASS2}".encode()).hexdigest()
        logger.info(f"Using raw OutSum for signature: {sum_for_sig!r}")
        logger.info(f"ProvidedSig={SignatureValue!r}, ExpectedSig={expected!r}")

        if expected.lower() != (SignatureValue or "").lower():
            logger.warning(f"Invalid signature for order {InvId}")
            try:
                await notifier.send(
                    chat_id,
                    "‚ùóÔ∏è –ü–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            except Exception as e:
                logger.error(f"Failed to send invalid-signature notification: {e!r}")
            raise HTTPException(400, "Invalid signature")

        # 5) –ï—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚Äî —Ç–∏—Ö–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK
        if order.status == "paid":
            return PlainTextResponse("OK")

        # 6) –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π callback: –æ—Ç–º–µ—á–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∏ —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        order_id = order.id

        # –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await notifier.send(chat_id, "‚ö°Ô∏è –ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é‚Ä¶")
        except Exception as e:
            logger.error(f"Failed to send pre-notification: {e!r}")

        order.status = "paid"
        session.commit()
        logger.info(f"Order {InvId} marked as PAID")

        # –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await notifier.send(
                chat_id,
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} ({float(sum_for_sig):.2f}‚ÇΩ) –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É üí™"
            )
        except Exception as e:
            logger.error(f"Failed to send success notification: {e!r}")

        # ‚Äî‚Äî‚Äî‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É ‚Äî‚Äî‚Äî‚Äî
        try:
            sub_svc  = SubscriptionService(chat_id)
            end_dt   = sub_svc.subscribe_month(months=1)
            sub_svc.close()
            # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–µ–∑ –≥–æ–¥–∞, —Å —á–∞—Å–∞–º–∏ –∏ –º–∏–Ω—É—Ç–∞–º–∏
            await notifier.send(
                chat_id,
                f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_dt.strftime('%d.%m %H:%M')}."
            )
        except Exception as e:
            logger.error(f"Failed to create subscription: {e!r}")
            await notifier.send(
                chat_id,
                "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    finally:
        session.close()

    return PlainTextResponse("OK")


@router.get(
    "/fail",
    response_class=PlainTextResponse,
    summary="Robokassa fail URL: –æ—Ç–º–µ–Ω–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç"
)
async def robokassa_fail(
    InvId: str,
    OutSum: str,
):
    logger.info(f"[/fail] called: InvId={InvId!r}, OutSum={OutSum!r}")
    session = SessionLocal()
    try:
        order = session.get(PaymentOrder, int(InvId))
        if not order:
            return PlainTextResponse("OK")
        user = session.get(User, order.user_id)
        if not user:
            return PlainTextResponse("OK")
        chat_id = user.telegram_id

        if order.status != "paid":
            try:
                await notifier.send(
                    chat_id,
                    "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
                logger.info(f"Sent failure notification for order {InvId}")
            except Exception as e:
                logger.error(f"Failed to send failure notification: {e!r}")
    finally:
        session.close()

    return PlainTextResponse("OK")
